---
title: "ESM 244 Lab 3 part 1: working with spatial data"
author: "Max Pepperdine"
format: 
  html: 
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(broom)

### spatial packages
library(sf)
library(tmap)
```

## Read in our data
```{r}
ca_counties_raw_sf <- read_sf(here("data/ca_counties/CA_Counties_TIGER2016.shp"))

ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>% 
  mutate(land_km2 = aland / 1e6) %>% 
  select(county = name, land_km2) #automatically keeps the geometry column

ca_counties_df <- ca_counties_sf %>% 
  as.data.frame() %>% 
  select(-geometry)
```

## check the CRS

```{r}
ca_counties_sf %>% st_crs()
ca_counties_sf %>% terra::crs()
```

## explore it visually 

```{r}
plot(ca_counties_sf %>%  select(land_km2)) #use select to plot desired variables
```

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf, 
          aes(fill = land_km2), color = "white", size = 0.1) +
  theme_void() + #get rid of lat/lon and gridlines
  scale_fill_gradientn(colors = c("cyan", "blue", "purple"))
```

## Read in some sesbania records (point observations)

```{r}
sesbania_sf <- read_sf(here("data/red_sesbania/ds80_for_lab.gpkg")) %>% 
  janitor::clean_names()

sesbania_sf %>% st_crs()

plot(sesbania_sf %>% select(id))
```

## The analysis:

Find the count of red sesbania observed locations in this dataset, by county, and then create a map of all CA counties using the fill color to indicate sesbania counts. 

### Pseudocode:

* Get data into the same coordinate system 
* Spatial join the two layers
* Group by county and count the # of observations in each county 
* Create a map of all CA counties with the count information showing

## Transform the CRS so observation records match counties

```{r}
#transform sesbania_sf into EPSG 3857
sesbania_3857_sf <- st_transform(sesbania_sf, 3857) 

#transform sesbania_sf into the CRS of 'ca_counties_sf'
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))
```

## Let's plot the two together!

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = "red")
```

## Spatial join

```{r}

#whichever layer in the first argument, the resulting layer will keep that geometry

ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf)

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf)
```

## Summarize by county


Choropleth (name for map)

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>% 
  summarize(n_records = sum(!is.na(id))) #only keep observations without NAs in id
```

```{r}
ggplot() + 
  geom_sf(data = sesb_counts_sf, 
          aes(fill = n_records), color = "grey", size = 1) +
  scale_fill_gradientn(colors = c("lightgrey", "orange", "purple")) +
  theme_minimal() +
  labs(fill = "Number of S. punicea records")
  
  
```

## Next analysis:

Plot only the county with the greatest number of red sesbania records, and make a map of those locations and where they occur within the county. 

### Pseudocode:

* Sort the n_records data to find the county with the highest number of records
* Select layer (Solano County) by attribute
* Select the point data from Solano County
* Make a new layer of just Solano County with the observation data

```{r}
#figure out which county has the most records
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>% 
  pull(county) #extract a single column (basically $)

solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county == county_max) #use 'county %in% ' if two records tie for first

solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)
```

```{r}
ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = "red")
```

# Making an interactive map with 'tmap' 

When you get to this code chunk, don't run it. 
```{r}
#| eval: false
#| include: true

### set the view mode to interactive
tmap_mode(mode = "view") #turn on the interactive viewer when you run this 

tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") + 
  tm_shape(sesbania_sf) +
  tm_dots()
```







